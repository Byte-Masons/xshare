{"version":3,"sources":["components/MetamaskInfo.js","api/common.js","api/vault.js","api/tshare.js","components/Toast.js","components/ToastContext.js","hooks/UseToastContext.js","helpers/error.js","components/Stake.js","components/Unstake.js","api/blockchain.js","api/strategy.js","api/tomb.js","components/Admin.js","components/Mason.js","api/mason.js","components/Masons.js","components/FarmWrapper.js","App.js","reportWebVitals.js","index.js"],"names":["MetamaskInfo","theme","createTheme","typography","htmlFontSize","Card","sx","minWidth","bgcolor","CardContent","Typography","variant","getProvider","ethers","providers","Web3Provider","window","ethereum","getContract","contract","address","abi","signer","getSigner","Contract","reaperVaultABI","require","vaultAddress","getReaperVaultContract","getUserVaultBalance","a","vaultContract","getBalance","getVaultBalance","balance","getAvailableVaultBalance","available","depositTShare","amount","deposit","withdrawTShare","withdraw","addToWhitelist","setAddressInWhitelist","erc20ABI","getTShareContract","getTShareBalance","tshareContract","provider","getAddress","userAddress","balanceOf","hasApprovedTShare","tshare","allowance","hasApproved","Number","approveTShare","setHasApproved","approve","constants","MaxInt256","tx","wait","status","Alert","React","props","ref","elevation","Toast","alertSeverity","alertMessage","open","setOpen","anchorOrigin","handleClose","event","reason","Snackbar","autoHideDuration","onClose","severity","width","ToastContext","createContext","ToastContextProvider","children","useState","isToastOpen","toastSeverity","toastMessage","state","setState","onSuccess","useCallback","message","onError","Provider","value","isOpen","vertical","horizontal","useToastContext","useContext","displayError","error","data","Stake","tshareBalance","vaultBalance","stakeTShareAmount","useEffect","fetchHasApproved","stakeTShare","handleApprove","Stack","spacing","direction","style","lineHeight","TextField","id","label","type","onChange","newAmount","target","Button","onClick","disabled","Unstake","unstakeTShareAmount","unstakeTShare","getBlockNumber","getCurrentBlock","getBlock","getBlockTimestamp","timestamp","strategyABI","getStrategyContract","harvest","getMasons","masonsLength","masons","index","mason","push","getCanWithdraw","canWithdraw","getBalanceOfStakedToken","parseInt","BigNumber","balanceOfStakedToken","from","_hex","masonryABI","treasuryABI","getMasonryContract","getEpoch","epoch","getNextEpochPoint","nextEpochPoint","allocateSeigniorage","Admin","currentEpoch","currentTimestamp","availableVaultBalance","addressToWhitelist","balanceDuringCurrentEpoch","update","handleHarvest","handleAllocateSeigniorage","handleAddToWhitelist","newValue","console","log","Mason","masonNr","earned","canClaimReward","getBoolText","b","masonABI","getMasonContract","masonAddress","getMasonData","Masons","fetchMasonData","fillMasonData","Promise","all","map","masonData","i","FarmWrapper","tab","rfTokenBalance","userVaultBalance","fetchBalance","Box","TabContext","borderBottom","borderColor","TabList","centered","Tab","TabPanel","App","isMetaMaskDetected","checkMetamask","enable","getNetwork","network","className","Grid","container","alignItems","justifyContent","minHeight","item","xs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56fff591.chunk.js","sourcesContent":["import Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { createTheme } from \"@mui/material/styles\";\r\n\r\nexport const MetamaskInfo = () => {\r\n  const theme = createTheme({\r\n    typography: {\r\n      htmlFontSize: 10,\r\n    },\r\n  });\r\n  return (\r\n    <Card\r\n      sx={{\r\n        minWidth: 275,\r\n        bgcolor: \"#80d8ff\",\r\n      }}\r\n    >\r\n      <CardContent>\r\n        <Typography variant=\"body2\" theme={theme}>\r\n          You must connect to the site with Metamask on the Fantom network.\r\n          <br />\r\n          If you switch networks then refresh the website with Fantom selected.\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n","import { ethers } from \"ethers\";\r\n\r\nexport const getProvider = () =>\r\n  new ethers.providers.Web3Provider(window.ethereum);\r\n\r\nexport const getContract = (contract, address, abi) => {\r\n  if (contract == null) {\r\n    const signer = getProvider().getSigner();\r\n    contract = new ethers.Contract(address, abi, signer);\r\n  }\r\n\r\n  return contract;\r\n};\r\n","import { ethers } from \"ethers\";\r\nimport { getContract } from \"./common\";\r\nimport { getBalance } from \"./tshare\";\r\nconst reaperVaultABI = require(\"../abi/ReaperVault.json\");\r\nlet reaperVaultContract = null;\r\nexport const vaultAddress = \"0xb40e774a627fC5Ca4dD628d997B18242da540B32\";\r\n\r\nexport const getReaperVaultContract = () =>\r\n  getContract(reaperVaultContract, vaultAddress, reaperVaultABI);\r\n\r\nexport const getUserVaultBalance = async () => {\r\n  const vaultContract = getReaperVaultContract();\r\n  return await getBalance(vaultContract);\r\n};\r\n\r\nexport const getVaultBalance = async () => {\r\n  const vaultContract = getReaperVaultContract();\r\n  return await vaultContract.balance();\r\n};\r\n\r\nexport const getAvailableVaultBalance = async () => {\r\n  const vaultContract = getReaperVaultContract();\r\n  return await vaultContract.available();\r\n};\r\n\r\nexport const depositTShare = async (amount) => {\r\n  const contract = getReaperVaultContract();\r\n  return await contract.deposit(amount);\r\n};\r\n\r\nexport const withdrawTShare = async (amount) => {\r\n  const contract = getReaperVaultContract();\r\n  return await contract.withdraw(amount);\r\n};\r\n\r\nexport const addToWhitelist = async (address) => {\r\n  const contract = getReaperVaultContract();\r\n  return await contract.setAddressInWhitelist(address, true);\r\n};\r\n","import { ethers } from \"ethers\";\r\nimport { getContract } from \"./common\";\r\nimport { vaultAddress } from \"./vault\";\r\nconst erc20ABI = require(\"../abi/ERC20.json\");\r\nconst tshareAddress = \"0x4cdF39285D7Ca8eB3f090fDA0C069ba5F4145B37\";\r\nlet tshareContract = null;\r\n\r\nexport const getTShareContract = () =>\r\n  getContract(tshareContract, tshareAddress, erc20ABI);\r\n\r\nexport const getTShareBalance = async () => {\r\n  const tshareContract = getTShareContract();\r\n  return await getBalance(tshareContract);\r\n};\r\n\r\nexport const getBalance = async (contract) => {\r\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n  const signer = provider.getSigner();\r\n  const userAddress = await signer.getAddress();\r\n  const balance = await contract.balanceOf(userAddress);\r\n  return balance;\r\n};\r\n\r\nexport const hasApprovedTShare = async () => {\r\n  const tshare = getTShareContract();\r\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n  const signer = provider.getSigner();\r\n  const userAddress = await signer.getAddress();\r\n  const allowance = await tshare.allowance(userAddress, vaultAddress);\r\n  const hasApproved = Number(allowance) !== 0;\r\n  return hasApproved;\r\n};\r\n\r\nexport const approveTShare = async (setHasApproved) => {\r\n  try {\r\n    const tshare = getTShareContract();\r\n    const tx = await tshare.approve(vaultAddress, ethers.constants.MaxInt256);\r\n    const receipt = await tx.wait();\r\n    if (receipt.status) {\r\n      setHasApproved(true);\r\n    }\r\n  } catch (error) {\r\n    setHasApproved(false);\r\n  }\r\n};\r\n","import * as React from \"react\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport MuiAlert from \"@mui/material/Alert\";\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default function Toast({\r\n  alertSeverity = \"success\",\r\n  alertMessage = \"\",\r\n  open,\r\n  setOpen,\r\n  anchorOrigin,\r\n}) {\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Snackbar\r\n        open={open}\r\n        autoHideDuration={6000}\r\n        onClose={handleClose}\r\n        anchorOrigin={anchorOrigin}\r\n      >\r\n        <Alert\r\n          onClose={handleClose}\r\n          severity={alertSeverity}\r\n          sx={{ width: \"100%\" }}\r\n        >\r\n          {alertMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n    </>\r\n  );\r\n}\r\n","import React, { createContext, useState, useCallback } from \"react\";\r\nimport Toast from \"./Toast\";\r\n\r\nconst ToastContext = createContext();\r\n\r\nexport default ToastContext;\r\n\r\nexport function ToastContextProvider({ children }) {\r\n  const [state, setState] = useState({\r\n    isToastOpen: false,\r\n    toastSeverity: \"success\",\r\n    toastMessage: \"\",\r\n  });\r\n\r\n  const setToastOpen = (isOpen) => {\r\n    if (isOpen !== state.isToastOpen) {\r\n      setState({ ...state, isToastOpen: isOpen });\r\n    }\r\n  };\r\n\r\n  const onSuccess = useCallback(\r\n    (message) => {\r\n      setState({\r\n        isToastOpen: true,\r\n        toastSeverity: \"success\",\r\n        toastMessage: message,\r\n      });\r\n    },\r\n    [setState]\r\n  );\r\n\r\n  const onError = useCallback(\r\n    (message) => {\r\n      setState({\r\n        isToastOpen: true,\r\n        toastSeverity: \"error\",\r\n        toastMessage: message,\r\n      });\r\n    },\r\n    [setState]\r\n  );\r\n\r\n  return (\r\n    <ToastContext.Provider value={{ onSuccess, onError }}>\r\n      {children}\r\n      <Toast\r\n        alertSeverity={state.toastSeverity}\r\n        alertMessage={state.toastMessage}\r\n        open={state.isToastOpen}\r\n        setOpen={setToastOpen}\r\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n      />\r\n    </ToastContext.Provider>\r\n  );\r\n}\r\n","import { useContext } from \"react\";\r\nimport ToastContext from \"../components/ToastContext\";\r\n\r\nexport default function useToastContext() {\r\n  return useContext(ToastContext);\r\n}\r\n","export const displayError = (error, onError) => {\r\n  if (error.message) {\r\n    onError(error.message);\r\n  } else if (error.data && error.data.message) {\r\n    onError(error.data.message);\r\n  } else {\r\n    onError(\"Unknown error\");\r\n  }\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport { hasApprovedTShare, approveTShare } from \"../api/tshare\";\r\nimport { depositTShare } from \"../api/vault\";\r\nimport useToastContext from \"../hooks/UseToastContext\";\r\nimport { displayError } from \"../helpers/error\";\r\n\r\nexport default function Stake({ tshareBalance, vaultBalance }) {\r\n  const [state, setState] = useState({\r\n    stakeTShareAmount: 0,\r\n    hasApprovedTShare: null,\r\n  });\r\n\r\n  const { onSuccess, onError } = useToastContext();\r\n\r\n  useEffect(() => {\r\n    if (state.hasApprovedTShare == null) {\r\n      async function fetchHasApproved() {\r\n        try {\r\n          const hasApproved = await hasApprovedTShare();\r\n          setState({ ...state, hasApprovedTShare: hasApproved });\r\n        } catch (error) {\r\n          displayError(error, onError);\r\n        }\r\n      }\r\n      fetchHasApproved();\r\n    }\r\n  }, []);\r\n\r\n  const amountChanged = (event) => {\r\n    const newAmount = event.target.value;\r\n    if (\r\n      newAmount !== state.stakeTShareAmount &&\r\n      newAmount >= 0 &&\r\n      newAmount <= tshareBalance\r\n    ) {\r\n      setState({ ...state, stakeTShareAmount: newAmount });\r\n    }\r\n  };\r\n\r\n  const stakeTShare = async () => {\r\n    try {\r\n      const tx = await depositTShare(state.stakeTShareAmount);\r\n      const receipt = await tx.wait();\r\n      if (receipt.status) {\r\n        onSuccess(\"Staking succeeded\");\r\n      }\r\n    } catch (error) {\r\n      displayError(error, onError);\r\n    }\r\n  };\r\n\r\n  const handleApprove = async () => {\r\n    const setHasApproved = (hasApproved) =>\r\n      setState({ ...state, hasApprovedTShare: hasApproved });\r\n    try {\r\n      const tx = await approveTShare(setHasApproved);\r\n      const receipt = await tx.wait();\r\n      if (receipt.status) {\r\n        onSuccess(\"Approval succeeded\");\r\n      }\r\n    } catch (error) {\r\n      displayError(error, onError);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <div style={{ lineHeight: 3.2 }}>TShare in wallet: {tshareBalance}</div>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <div style={{ lineHeight: 3.2 }}>Vault shares: {vaultBalance}</div>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <div style={{ lineHeight: 3.2 }}>TShare amount to stake:</div>\r\n        <TextField\r\n          id=\"outlined-basic\"\r\n          label=\"TShare\"\r\n          variant=\"outlined\"\r\n          type=\"number\"\r\n          value={state.stakeTShareAmount}\r\n          onChange={amountChanged}\r\n        />\r\n        <Button\r\n          variant=\"outlined\"\r\n          onClick={handleApprove}\r\n          disabled={state.hasApprovedTShare}\r\n        >\r\n          Approve\r\n        </Button>\r\n        <Button\r\n          variant=\"outlined\"\r\n          onClick={stakeTShare}\r\n          disabled={!state.hasApprovedTShare}\r\n        >\r\n          Stake\r\n        </Button>\r\n      </Stack>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport { withdrawTShare } from \"../api/vault\";\r\nimport useToastContext from \"../hooks/UseToastContext\";\r\nimport { displayError } from \"../helpers/error\";\r\n\r\nexport default function Unstake({ tshareBalance, vaultBalance }) {\r\n  const [state, setState] = useState({\r\n    unstakeTShareAmount: 0,\r\n  });\r\n\r\n  const { onSuccess, onError } = useToastContext();\r\n\r\n  const amountChanged = (event) => {\r\n    const newAmount = event.target.value;\r\n    if (\r\n      newAmount !== state.unstakeTShareAmount &&\r\n      newAmount >= 0 &&\r\n      newAmount <= vaultBalance\r\n    ) {\r\n      setState({ ...state, unstakeTShareAmount: newAmount });\r\n    }\r\n  };\r\n\r\n  const unstakeTShare = async () => {\r\n    try {\r\n      const tx = await withdrawTShare(state.unstakeTShareAmount);\r\n      const receipt = await tx.wait();\r\n      if (receipt.status) {\r\n        onSuccess(\"Unstaking succeeded\");\r\n      }\r\n    } catch (error) {\r\n      displayError(error, onError);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <div style={{ lineHeight: 3.2 }}>TShare in wallet: {tshareBalance}</div>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <div style={{ lineHeight: 3.2 }}>TShare staked: {vaultBalance}</div>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <div style={{ lineHeight: 3.2 }}>TShare amount to unstake:</div>\r\n        <TextField\r\n          id=\"outlined-basic\"\r\n          label=\"TShare\"\r\n          variant=\"outlined\"\r\n          type=\"number\"\r\n          value={state.unstakeTShareAmount}\r\n          onChange={amountChanged}\r\n        />\r\n        <Button variant=\"outlined\" onClick={unstakeTShare}>\r\n          Unstake\r\n        </Button>\r\n      </Stack>\r\n    </div>\r\n  );\r\n}\r\n","import { getProvider } from \"./common\";\r\n\r\nconst getBlockNumber = async () => await getProvider().getBlockNumber();\r\n\r\nconst getCurrentBlock = async () =>\r\n  await getProvider().getBlock(await getBlockNumber());\r\n\r\nexport const getBlockTimestamp = async () =>\r\n  (await getCurrentBlock()).timestamp;\r\n","import { ethers } from \"ethers\";\r\nimport { getContract } from \"./common\";\r\nconst strategyABI = require(\"../abi/ReaperAutoCompound-Masonry.json\");\r\nconst strategyAddress = \"0xb203A4ab80d84982602e413346724E83118ACb17\";\r\nlet strategyContract = null;\r\n\r\nconst getStrategyContract = () => {\r\n  return getContract(strategyContract, strategyAddress, strategyABI);\r\n};\r\n\r\nexport const harvest = async () => await getStrategyContract().harvest();\r\n\r\nexport const getMasons = async () => {\r\n  const contract = getStrategyContract();\r\n  const masonsLength = 6;\r\n  const masons = [];\r\n  for (let index = 0; index < masonsLength; index++) {\r\n    const mason = await contract.masons(index);\r\n    masons.push(mason);\r\n  }\r\n  return masons;\r\n};\r\n\r\nexport const getCanWithdraw = async () => {\r\n  const contract = getStrategyContract();\r\n  return !await contract.canWithdraw();\r\n};\r\n\r\nexport const getBalanceOfStakedToken = async () => {\r\n  const contract = getStrategyContract();\r\n  const balanceOfStakedToken = parseInt(ethers.BigNumber.from(await contract.balanceOfStakedToken())._hex,16);\r\n  return balanceOfStakedToken;\r\n}","import { getContract } from \"./common\";\r\nconst masonryABI = require(\"../abi/Masonry.json\");\r\nconst treasuryABI = require(\"../abi/TombTreasury.json\");\r\n\r\nconst masonryAddress = \"0x8764DE60236C5843D9faEB1B638fbCE962773B67\";\r\nconst treasuryAddress = \"0xF50c6dAAAEC271B56FCddFBC38F0b56cA45E6f0d\";\r\n\r\nlet masonryContract = null;\r\nlet treasuryContract = null;\r\n\r\nconst getMasonryContract = () => {\r\n  return getContract(masonryContract, masonryAddress, masonryABI);\r\n};\r\n\r\nconst getTreasuryContract = () => {\r\n  return getContract(treasuryContract, treasuryAddress, treasuryABI);\r\n};\r\n\r\nexport const getEpoch = async () => {\r\n  const contract = getMasonryContract();\r\n  return await contract.epoch();\r\n};\r\n\r\nexport const getNextEpochPoint = async () => {\r\n  const contract = getMasonryContract();\r\n  return await contract.nextEpochPoint();\r\n};\r\n\r\nexport const allocateSeigniorage = async () => {\r\n  const contract = getTreasuryContract();\r\n  return await contract.allocateSeigniorage();\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport { getBlockTimestamp } from \"../api/blockchain\";\r\nimport { harvest, getCanWithdraw, getBalanceOfStakedToken } from \"../api/strategy\";\r\nimport { allocateSeigniorage, getEpoch, getNextEpochPoint } from \"../api/tomb\";\r\nimport {\r\n  getVaultBalance,\r\n  getAvailableVaultBalance,\r\n  addToWhitelist,\r\n} from \"../api/vault\";\r\nimport useToastContext from \"../hooks/UseToastContext\";\r\nimport { displayError } from \"../helpers/error\";\r\n\r\nexport default function Admin({}) {\r\n  const [state, setState] = useState({\r\n    currentEpoch: null,\r\n    currentTimestamp: null,\r\n    nextEpochPoint: null,\r\n    vaultBalance: null,\r\n    availableVaultBalance: null,\r\n    addressToWhitelist: \"\",\r\n    canWithdraw: null,\r\n    balanceDuringCurrentEpoch: null\r\n  });\r\n\r\n  const { onSuccess, onError } = useToastContext();\r\n\r\n  useEffect(() => {\r\n    if (state.currentEpoch == null && state.currentTimestamp == null) {\r\n      update();\r\n    }\r\n  }, []);\r\n\r\n  const update = async () => {\r\n    try {\r\n      const currentEpoch = Number(await getEpoch());\r\n      const currentTimestamp = Number(await getBlockTimestamp());\r\n      const nextEpochPoint = Number(await getNextEpochPoint());\r\n      const vaultBalance = Number(await getVaultBalance());\r\n      const availableVaultBalance = Number(await getAvailableVaultBalance());\r\n      const canWithdraw = await getCanWithdraw();\r\n      const balanceOfStakedToken = await getBalanceOfStakedToken();\r\n      setState({\r\n        ...state,\r\n        currentEpoch,\r\n        currentTimestamp,\r\n        nextEpochPoint,\r\n        vaultBalance,\r\n        availableVaultBalance,\r\n        canWithdraw,\r\n        balanceOfStakedToken,\r\n      });\r\n    } catch (error) {\r\n      displayError(error, onError);\r\n    }\r\n  };\r\n\r\n  const handleHarvest = async () => {\r\n    try {\r\n      const tx = await harvest();\r\n      const receipt = await tx.wait();\r\n      if (receipt.status) {\r\n        onSuccess(\"Harvest succeeded\");\r\n      }\r\n    } catch (error) {\r\n      displayError(error, onError);\r\n    }\r\n  };\r\n\r\n  const handleAllocateSeigniorage = async () => {\r\n    try {\r\n      const tx = await allocateSeigniorage();\r\n      const receipt = await tx.wait();\r\n      if (receipt.status) {\r\n        onSuccess(\"allocateSeigniorage succeeded\");\r\n      }\r\n    } catch (error) {\r\n      displayError(error, onError);\r\n    }\r\n  };\r\n\r\n  const handleAddressToWhitelistChange = (event) => {\r\n    const newValue = event.target.value;\r\n    console.log(newValue);\r\n    setState({ ...state, addressToWhitelist: newValue });\r\n  };\r\n\r\n  const handleAddToWhitelist = async () => {\r\n    await addToWhitelist(state.addressToWhitelist);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <div style={{ lineHeight: 3.2 }}>\r\n          Current epoch: {state.currentEpoch}\r\n        </div>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <div style={{ lineHeight: 3.2 }}>\r\n          Current timestamp: {state.currentTimestamp}\r\n        </div>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <div style={{ lineHeight: 3.2 }}>\r\n          Time to next epoch: {state.nextEpochPoint - state.currentTimestamp}\r\n        </div>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <div style={{ lineHeight: 3.2 }}>Vault TVL: {state.vaultBalance}</div>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <div style={{ lineHeight: 3.2 }}>\r\n          Vault available TVL: {state.availableVaultBalance}\r\n        </div>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <div style={{ lineHeight: 3.2 }}>\r\n          Withdrawable amount: {state.balanceOfStakedToken}\r\n        </div>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <div style={{ lineHeight: 3.2 }}>\r\n          Can withdraw: {state.canWithdraw ? \"Yes\" : \"No\"}\r\n        </div>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <Button variant=\"outlined\" onClick={handleAllocateSeigniorage}>\r\n          Allocate seigniorage\r\n        </Button>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <Button variant=\"outlined\" onClick={handleHarvest}>\r\n          Harvest\r\n        </Button>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <Button variant=\"outlined\" onClick={update}>\r\n          Update data\r\n        </Button>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <div style={{ lineHeight: 3.2 }}>Address to whitelist:</div>\r\n        <TextField\r\n          id=\"outlined-basic\"\r\n          label=\"Address\"\r\n          variant=\"outlined\"\r\n          type=\"string\"\r\n          value={state.addressToWhitelist}\r\n          onChange={handleAddressToWhitelistChange}\r\n        />\r\n        <Button variant=\"outlined\" onClick={handleAddToWhitelist}>\r\n          Add to whitelist\r\n        </Button>\r\n      </Stack>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Stack from \"@mui/material/Stack\";\r\n\r\nexport default function Mason({\r\n  masonNr,\r\n  balance,\r\n  earned,\r\n  canClaimReward,\r\n  canWithdraw,\r\n}) {\r\n  const getBoolText = (b) => (b ? \"Yes\" : \"No\");\r\n  return (\r\n    <Stack spacing={2} direction=\"row\">\r\n      <div style={{ lineHeight: 3.2 }}>{masonNr}</div>\r\n      <div style={{ lineHeight: 3.2 }}>Balance: {balance}</div>\r\n      <div style={{ lineHeight: 3.2 }}>Earned: {earned}</div>\r\n      <div style={{ lineHeight: 3.2 }}>\r\n        Claim: {getBoolText(canClaimReward)}\r\n      </div>\r\n      <div style={{ lineHeight: 3.2 }}>\r\n        Withdraw: {getBoolText(canWithdraw)}\r\n      </div>\r\n    </Stack>\r\n  );\r\n}\r\n","import { getContract } from \"./common\";\r\nconst masonABI = require(\"../abi/Mason.json\");\r\nlet masonContract = null;\r\n\r\nconst getMasonContract = (masonAddress) => {\r\n  return getContract(masonContract, masonAddress, masonABI);\r\n};\r\n\r\nexport const getMasonData = async (masonAddress) => {\r\n  const contract = getMasonContract(masonAddress);\r\n  const balance = Number(await contract.balanceOf());\r\n  const earned = Number(await contract.earned());\r\n  const canClaimReward = await contract.canClaimReward();\r\n  const canWithdraw = await contract.canWithdraw();\r\n  return {\r\n    balance,\r\n    earned,\r\n    canClaimReward,\r\n    canWithdraw,\r\n    address: masonAddress,\r\n  };\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Mason from \"./Mason\";\r\nimport { getBlockTimestamp } from \"../api/blockchain\";\r\nimport { getMasons } from \"../api/strategy\";\r\nimport { getMasonData } from \"../api/mason\";\r\nimport { allocateSeigniorage, getEpoch, getNextEpochPoint } from \"../api/tomb\";\r\nimport { getVaultBalance, getAvailableVaultBalance } from \"../api/vault\";\r\nimport useToastContext from \"../hooks/UseToastContext\";\r\n\r\nexport default function Masons() {\r\n  const [state, setState] = useState({\r\n    masons: [],\r\n  });\r\n\r\n  //   const { onSuccess, onError } = useToastContext();\r\n\r\n  useEffect(() => {\r\n    fetchMasonData();\r\n  }, []);\r\n\r\n  const fetchMasonData = async () => {\r\n    const masonAddress = await getMasons();\r\n    const masons = await fillMasonData(masonAddress);\r\n    console.log(masons);\r\n    setState({ masons });\r\n  };\r\n\r\n  const fillMasonData = async (masons) =>\r\n    await Promise.all(\r\n      masons.map(async (mason) => {\r\n        const masonData = await getMasonData(mason);\r\n        return { address: mason, ...masonData };\r\n      })\r\n    );\r\n\r\n  //   const update = async () => {\r\n  //     try {\r\n  //       const currentEpoch = Number(await getEpoch());\r\n  //       const currentTimestamp = Number(await getBlockTimestamp());\r\n  //       const nextEpochPoint = Number(await getNextEpochPoint());\r\n  //       const vaultBalance = Number(await getVaultBalance());\r\n  //       const availableVaultBalance = Number(await getAvailableVaultBalance());\r\n  //       setState({\r\n  //         ...state,\r\n  //         currentEpoch,\r\n  //         currentTimestamp,\r\n  //         nextEpochPoint,\r\n  //         vaultBalance,\r\n  //         availableVaultBalance,\r\n  //       });\r\n  //     } catch (error) {\r\n  //       onError(error.data.message);\r\n  //     }\r\n  //   };\r\n\r\n  //   const handleHarvest = async () => {\r\n  //     try {\r\n  //       const tx = await harvest();\r\n  //       const receipt = await tx.wait();\r\n  //       if (receipt.status) {\r\n  //         onSuccess(\"Harvest succeeded\");\r\n  //       }\r\n  //     } catch (error) {\r\n  //       onError(error.data.message);\r\n  //     }\r\n  //   };\r\n\r\n  //   const handleAllocateSeigniorage = async () => {\r\n  //     try {\r\n  //       const tx = await allocateSeigniorage();\r\n  //       const receipt = await tx.wait();\r\n  //       if (receipt.status) {\r\n  //         onSuccess(\"allocateSeigniorage succeeded\");\r\n  //       }\r\n  //     } catch (error) {\r\n  //       onError(error.data.message);\r\n  //     }\r\n  //   };\r\n  const renderMasons = () =>\r\n    state.masons.map((mason, i) => {\r\n      const { balance, earned, canClaimReward, canWithdraw, address } = mason;\r\n      return (\r\n        <Mason\r\n          key={address}\r\n          masonNr={i}\r\n          balance={balance}\r\n          earned={earned}\r\n          canClaimReward={canClaimReward}\r\n          canWithdraw={canWithdraw}\r\n        />\r\n      );\r\n    });\r\n\r\n  return (\r\n    <div>\r\n      {renderMasons()}\r\n      {/* <Stack spacing={2} direction=\"row\">\r\n        <div style={{ lineHeight: 3.2 }}>\r\n          Current timestamp: {state.currentTimestamp}\r\n        </div>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <div style={{ lineHeight: 3.2 }}>\r\n          Time to next epoch: {state.nextEpochPoint - state.currentTimestamp}\r\n        </div>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <div style={{ lineHeight: 3.2 }}>Vault TVL: {state.vaultBalance}</div>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <div style={{ lineHeight: 3.2 }}>\r\n          Vault available TVL: {state.availableVaultBalance}\r\n        </div>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <Button variant=\"outlined\" onClick={handleAllocateSeigniorage}>\r\n          Allocate seigniorage\r\n        </Button>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <Button variant=\"outlined\" onClick={handleHarvest}>\r\n          Harvest\r\n        </Button>\r\n      </Stack>\r\n      <Stack spacing={2} direction=\"row\">\r\n        <Button variant=\"outlined\" onClick={update}>\r\n          Update data\r\n        </Button>\r\n      </Stack> */}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport TabContext from \"@mui/lab/TabContext\";\r\nimport TabList from \"@mui/lab/TabList\";\r\nimport TabPanel from \"@mui/lab/TabPanel\";\r\nimport Stake from \"./Stake\";\r\nimport Unstake from \"./Unstake\";\r\nimport Admin from \"./Admin\";\r\nimport Masons from \"./Masons\";\r\nimport { getTShareBalance } from \"../api/tshare\";\r\nimport { getUserVaultBalance } from \"../api/vault\";\r\nimport useToastContext from \"../hooks/UseToastContext\";\r\nimport { displayError } from \"../helpers/error\";\r\n\r\nexport default function FarmWrapper() {\r\n  const [state, setState] = useState({\r\n    tab: \"1\",\r\n    tshareBalance: null,\r\n    vaultBalance: null,\r\n    rfTokenBalance: null,\r\n  });\r\n\r\n  const { onSuccess, onError } = useToastContext();\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setState({ ...state, tab: newValue });\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function fetchBalance() {\r\n      try {\r\n        const tshareBalance = await getTShareBalance();\r\n        const userVaultBalance = await getUserVaultBalance();\r\n        setState({\r\n          ...state,\r\n          tshareBalance: Number(tshareBalance),\r\n          vaultBalance: Number(userVaultBalance),\r\n        });\r\n      } catch (error) {\r\n        displayError(error, onError);\r\n      }\r\n    }\r\n    fetchBalance();\r\n  }, []);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        typography: \"body1\",\r\n        bgcolor: \"#80d8ff\",\r\n      }}\r\n    >\r\n      <TabContext value={state.tab}>\r\n        <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\r\n          <TabList onChange={handleTabChange} centered>\r\n            <Tab label=\"Stake\" value=\"1\" />\r\n            <Tab label=\"Unstake\" value=\"2\" />\r\n            <Tab label=\"Admin\" value=\"3\" />\r\n            <Tab label=\"Masons\" value=\"4\" />\r\n          </TabList>\r\n        </Box>\r\n        <TabPanel value=\"1\">\r\n          <Stake\r\n            tshareBalance={state.tshareBalance}\r\n            vaultBalance={state.vaultBalance}\r\n          />\r\n        </TabPanel>\r\n        <TabPanel value=\"2\">\r\n          <Unstake\r\n            tshareBalance={state.tshareBalance}\r\n            vaultBalance={state.vaultBalance}\r\n          />\r\n        </TabPanel>\r\n        <TabPanel value=\"3\">\r\n          <Admin />\r\n        </TabPanel>\r\n        <TabPanel value=\"4\">\r\n          <Masons />\r\n        </TabPanel>\r\n      </TabContext>\r\n    </Box>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { MetamaskInfo } from \"./components/MetamaskInfo\";\r\nimport FarmWrapper from \"./components/FarmWrapper\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport { ToastContextProvider } from \"./components/ToastContext\";\r\n\r\nfunction App() {\r\n  const [state, setState] = useState({\r\n    isMetaMaskDetected: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    checkMetamask();\r\n  }, []);\r\n\r\n  const checkMetamask = async () => {\r\n    if (!state.isMetaMaskDetected) {\r\n      try {\r\n        await window.ethereum.enable();\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const network = await provider.getNetwork();\r\n        if (signer && network) {\r\n          setState({ ...state, isMetaMaskDetected: true });\r\n        }\r\n      } catch (error) {}\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ToastContextProvider>\r\n      <div className=\"App\">\r\n        <Grid\r\n          container\r\n          spacing={0}\r\n          direction=\"column\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          style={{ minHeight: \"100vh\" }}\r\n        >\r\n          <Grid item xs={3}>\r\n            {!state.isMetaMaskDetected ? <MetamaskInfo /> : <FarmWrapper />}\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </ToastContextProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}